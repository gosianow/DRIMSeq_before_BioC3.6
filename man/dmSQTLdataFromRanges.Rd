% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/class_dmSQTLdata.R
\name{dmSQTLdataFromRanges}
\alias{dmSQTLdataFromRanges}
\title{Create \code{\linkS4class{dmSQTLdata}} object from tables of counts,
 genotypes and gene ranges}
\usage{
dmSQTLdataFromRanges(counts, gene_id_counts, feature_id_counts, gene_ranges,
  genotypes, snp_id_genotypes, snp_ranges, sample_id, window = 5000)
}
\arguments{
\item{counts}{A numeric matrix of counts. Rows represent features (exons,
  bins or transcripts), columns represent samples.}

\item{gene_id_counts}{Vector of gene IDs of lenght correspoding to the number of rows in \code{counts}.}

\item{feature_id_counts}{Vector of feature IDs of lenght correspoding to the number of rows in \code{counts}.}

\item{gene_ranges}{\code{\linkS4class{GRanges}} object with information
  about gene location.}

\item{genotypes}{A numeric matrix of unmatched genotypes. See Details.}

\item{snp_id_genotypes}{Vector of SNP IDs that correspond to genotypes.}

\item{snp_ranges}{\code{\linkS4class{GRanges}} object with information about
  SNP location.}

\item{sample_id}{A vector of unique sample IDs of length corresponding to
  the number of columns in \code{counts}.}

\item{window}{Numeric. Size of a down and up stream window that is used to
  match SNPs to a gene. See details.}
}
\value{
Returns a \code{\linkS4class{dmSQTLdata}} object containing counts,
   genotypes and sample information.
}
\description{
Create \code{\linkS4class{dmSQTLdata}} object from tables of counts,
 genotypes and gene ranges
}
\examples{
### counts
 head(dataSQTL_counts)
 counts <- as.matrix(dataSQTL_counts[, -1])

 group_id <- dataSQTL_counts[,1]
 group_split <- limma::strsplit2(group_id, ":")
 gene_id_counts <- group_split[, 1]
 feature_id_counts <- group_split[, 2]

 ### gene_ranges
 dataSQTL_gene_ranges
 gene_ranges <- dataSQTL_gene_ranges
 names(gene_ranges) <- S4Vectors::mcols(gene_ranges)$name


 ### genotypes
 head(dataSQTL_genotypes)
 genotypes <- as.matrix(dataSQTL_genotypes[, -(1:4)])

 snp_id_genotypes <- dataSQTL_genotypes$snp_id

 snp_ranges <- GenomicRanges::GRanges(S4Vectors::Rle(dataSQTL_genotypes$chr),
 IRanges::IRanges(dataSQTL_genotypes$start, dataSQTL_genotypes$end))
 names(snp_ranges) <- dataSQTL_genotypes$snp_id

 all(colnames(counts) == colnames(genotypes))

 sample_id <- colnames(counts)

 ### create dmSQTLdata object
 data <- dmSQTLdataFromRanges(counts, gene_id_counts, feature_id_counts,
 gene_ranges, genotypes, snp_id_genotypes, snp_ranges, sample_id,
 window = 5e3)

 dmSQTLplotData(data)
}

