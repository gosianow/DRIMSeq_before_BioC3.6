% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DRIMSeq.R
\docType{data}
\name{data_dmDSdata}
\alias{data_dmDSdata}
\title{Sample data for differential splicing analysis}
\format{\code{data_dmDSdata} is a \code{\linkS4class{dmDSdata}} object. See Examples.}
\source{
Brooks AN, Yang L, Duff MO, et al. Conservation of an RNA regulatory map between Drosophila and mammals. Genome Res. 2011;21(2):193-202.

\code{pasilla} package.
}
\usage{
data_dmDSdata
}
\value{
\code{data_dmDSdata}
}
\description{
We use a subset of HTSeq exonic bin counts from \code{pasilla} package.
}
\examples{

#############################
### Create dmDSdata object
#############################
### Get HTSeq exonic bin counts from 'pasilla' package

library(pasilla)

data_dir  <- system.file("extdata", package="pasilla")
count_files <- list.files(data_dir, pattern="fb.txt$", full.names=TRUE)
count_files

# Create a data frame with htseq counts
htseq_list <- lapply(1:length(count_files), function(i){
  # i = 1
  htseq <- read.table(count_files[i], header = FALSE, as.is = TRUE)
  colnames(htseq) <- c("group_id", gsub("fb.txt", "", strsplit(count_files[i], 
     "extdata/")[[1]][2]))
  return(htseq)
})

htseq_counts <- Reduce(function(...) merge(..., by = "group_id", all=TRUE, 
   sort = FALSE), htseq_list)
tail(htseq_counts)
htseq_counts <- htseq_counts[!grepl(pattern = "_", htseq_counts$group_id), ]

group_split <- limma::strsplit2(htseq_counts[, 1], ":")

d <- dmDSdata(counts = htseq_counts[, -1], gene_id = group_split[, 1], 
   feature_id = group_split[, 2], sample_id = colnames(htseq_counts)[-1], 
   group = gsub("[1-4]", "", colnames(htseq_counts)[-1]))

plotData(d)

# Use a subset of genes, which is defined in the following file
genes_subset = readLines(file.path(data_dir, "geneIDsinsubset.txt"))
d <- d[names(d) \%in\% genes_subset, ]

plotData(d)

## data_dmDSdata <- d

###################################
### Differential splicing analysis
###################################
# If possible, increase the number of workers in BPPARAM

d <- data_dmDSdata

head(counts(d))
samples(d)
head(names(d))
length(d)
d[1:20, ]
d[1:20, 1:3]

### Filtering
# Check what is the minimal number of replicates per condition 
table(samples(d)$group)
d <- dmFilter(d, min_samps_gene_expr = 6, min_samps_feature_expr = 3, 
 min_samps_feature_prop = 3)
plotData(d)

### Calculate dispersion
d <- dmDispersion(d, BPPARAM = BiocParallel::MulticoreParam(workers = 3))
plotDispersion(d)

head(mean_expression(d))
common_dispersion(d)
head(genewise_dispersion(d))

### Fit full model proportions
d <- dmFit(d, BPPARAM = BiocParallel::MulticoreParam(workers = 1))

head(proportions(d))
head(statistics(d))

### Fit null model proportions and test for DS
d <- dmTest(d, BPPARAM = BiocParallel::MulticoreParam(workers = 1))
plotTest(d)

head(proportions(d))
head(statistics(d))
head(results(d))

### Plot feature proportions for top DS gene
res <- results(d)
res <- res[order(res$pvalue, decreasing = FALSE), ]

gene_id <- res$gene_id[1]

plotFit(d, gene_id = gene_id)
plotFit(d, gene_id = gene_id, plot_type = "lineplot")
plotFit(d, gene_id = gene_id, plot_type = "ribbonplot")


}
\keyword{datasets}

