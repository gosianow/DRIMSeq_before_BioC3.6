% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DRIMSeq.R
\docType{data}
\name{data_dmSQTLdata}
\alias{data_dmSQTLdata}
\title{Sample data for sQTL analysis}
\format{\code{data_dmSQTLdata} is a \code{\linkS4class{dmSQTLdata}} object. See Examples.}
\source{
Lappalainen T, Sammeth M, Friedlander MR, et al. Transcriptome and genome sequencing uncovers functional variation in humans. Nature. 2013;501(7468):506-11.

Genotypes and transcript quantification were downloaded from http://www.ebi.ac.uk/Tools/geuvadis-das/.

Gene annotation Gencode v12 from http://www.gencodegenes.org/releases/12.html.
}
\usage{
data_dmSQTLdata
}
\value{
\code{data_dmSQTLdata}
}
\description{
A subset of data from GEUVADIS project where 462 RNA-Seq samples from lymphoblastoid cell lines were obtained. The genome sequencing data of the same individuals is provided by the 1000 Genomes Project. The samples in this project come from five populations: CEPH (CEU), Finns (FIN), British (GBR), Toscani (TSI) and Yoruba (YRI). Here, we make available subsets of bi-allelic SNPs and transcript expected counts for CEPH population (91 individuals) that correspond to 50 randomly selected genes from chromosome 19. For the details on how this data was preprocessed, see the vignette.
}
\examples{

#############################
### Create dmSQTLdata object
#############################

library(GenomicRanges)
library(rtracklayer)

data_dir  <- system.file("extdata", package = "DRIMSeq")


# gene_ranges with names!
gene_ranges <- import(paste0(data_dir, "/genes_subset.bed"))
names(gene_ranges) <- mcols(gene_ranges)$name

counts <- read.table(paste0(data_dir, "/TrQuantCount_CEU_subset.tsv"), 
   header = TRUE, sep = "\\t", as.is = TRUE)

genotypes <- read.table(paste0(data_dir, "/genotypes_CEU_subset.tsv"), 
   header = TRUE, sep = "\\t", as.is = TRUE)

# snp_ranges with names!
snp_ranges <- GRanges(Rle(genotypes$chr), IRanges(genotypes$start, 
   genotypes$end))
names(snp_ranges) <- genotypes$snpId 

## Check if samples in count and genotypes are in the same order
all(colnames(counts[, -(1:2)]) == colnames(genotypes[, -(1:4)]))
sample_id <- colnames(counts[, -(1:2)])


d <- dmSQTLdataFromRanges(counts = counts[, -(1:2)], gene_id = counts$geneId, 
   feature_id = counts$trId, gene_ranges = gene_ranges, 
   genotypes = genotypes[, -(1:4)], snp_id = genotypes$snpId, 
   snp_ranges = snp_ranges, sample_id = sample_id, window = 5e3, 
   BPPARAM = BiocParallel::MulticoreParam(workers = 1))

plotData(d)


## data_dmSQTLdata <- d

#############################
### sQTL analysis
#############################
# If possible, increase the number of workers in BPPARAM

d <- data_dmSQTLdata

head(names(d))
length(d)
d[1:10, ]
d[1:10, 1:10]

### Filtering
d <- dmFilter(d, min_samps_gene_expr = 70, min_samps_feature_expr = 5, 
   min_samps_feature_prop = 5, minor_allele_freq = 5, 
   BPPARAM = BiocParallel::MulticoreParam(workers = 1))
plotData(d)


### Calculate dispersion
d <- dmDispersion(d, BPPARAM = BiocParallel::MulticoreParam(workers = 3))
plotDispersion(d)


### Fit full model proportions
d <- dmFit(d, BPPARAM = BiocParallel::MulticoreParam(workers = 1))


### Fit null model proportions and test for sQTLs
d <- dmTest(d, BPPARAM = BiocParallel::MulticoreParam(workers = 1))
plotTest(d)

head(results(d))

### Plot feature proportions for top sQTL
res <- results(d)
res <- res[order(res$pvalue, decreasing = FALSE), ]

gene_id <- res$gene_id[1]
snp_id <- res$snp_id[1]

plotFit(d, gene_id, snp_id)
plotFit(d, gene_id, snp_id, plot_type = "boxplot2", order = FALSE)
plotFit(d, gene_id, snp_id, plot_type = "ribbonplot")

}
\keyword{datasets}

